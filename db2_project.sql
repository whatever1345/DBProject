set serveroutput on;

drop table worlds;
drop table game_history;
drop table spectator;
drop table contracts;
drop table players;
drop table managers;
drop table teams;
drop table regions;

create table regions (
    id_region NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    abbr varchar(3),
    region_name varchar(20),
    region_location varchar(15)
);

create table teams (
    id_team NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    team_name varchar(3),
    id_region int,
    established_on date,
    
    foreign key (id_region) references regions(id_region)
);

create table managers (
    id_manager NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    id_team int,
    first_name varchar(50),
    last_name varchar(50),
    email varchar(40),
    phone varchar(12),
    budget int,
    
    foreign key (id_team) references teams(id_team)
);

create table spectator (
    id_spectator NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    first_name varchar(50),
    last_name varchar(50),
    email varchar(40),
    phone varchar(12)
);

create table players (
    id_player NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    ingame_name varchar(10),
    first_name varchar(50),
    last_name varchar(50),
    id_team int null,
    player_position int,
    status int,
    salary int,
    contract_expired date,
    
    foreign key (id_team) references teams(id_team)
);

create table contracts (
    id_contract NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    id_manager int null,
    id_player int,
    start_at date,
    price int,
    
    foreign key (id_manager) references managers(id_manager),
    foreign key (id_player) references players(id_player)
);

create table game_history (
    id_game NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    id_blue_team int,
    id_red_team int,
    id_spectator int,
    game_result int,
    start_at date,
    end_at date,
    status int,
    
    foreign key (id_blue_team) references teams(id_team),
    foreign key (id_red_team) references teams(id_team),
    foreign key (id_spectator) references spectator(id_spectator)
);


create table worlds (
    id_champ NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY primary key,
    id_team int,
    worlds_year date,
    worlds_location varchar(15),
    prize int,
    
    foreign key (id_team) references teams(id_team)
);

insert into regions (id_region, abbr, region_name, region_location) values (1, 'LCK', 'LOL Champions Korea', 'South Korea');
insert into regions (id_region, abbr, region_name, region_location) values (2, 'LPL', 'LOL Pro League', 'China Mainland');
insert into regions (id_region, abbr, region_name, region_location) values (3, 'LEC', 'LOL Eu Championship', 'Europe');

insert into teams (id_team, team_name, id_region, established_on) values (1, 'SKT', 1, TO_DATE('2013/05/06', 'yyyy/mm/dd'));
insert into teams (id_team, team_name, id_region, established_on) values (2, 'WBG', 2, TO_DATE('2019/03/09', 'yyyy/mm/dd'));
insert into teams (id_team, team_name, id_region, established_on) values (3, 'G2', 3, TO_DATE('2015/07/12', 'yyyy/mm/dd'));

insert into managers (id_manager, id_team, first_name, last_name, email, phone, budget)
    values (1, 1, 'AAA', 'BBB', 'aaa.bbb@skt.com', '999999999999', 50000);
    
insert into managers (id_manager, id_team, first_name, last_name, email, phone, budget)
    values (2, 2, 'CCC', 'DDD', 'ccc.ddd@wbg.com', '000000000000', 15000);
    
insert into managers (id_manager, id_team, first_name, last_name, email, phone, budget)
    values (3, 3, 'EEE', 'FFF', 'eee.fff@g2.com', '111111111111', 15000);
    
insert into spectator (id_spectator, first_name, last_name, email, phone)
    values (1, 'XXX', 'YYY', 'xxx.yyy@spectator.com', '222222222222');
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (1, 'Faker', 'Sang-hyeok', 'Lee',  1, 3, 1, 5000, TO_DATE('2033/05/06', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (2, 'Zeus', 'Woo-je', 'Choi', 1, 1, 1, 3000, TO_DATE('2033/01/01', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (3, 'Oner', 'Hyeon-jun', 'Mun', 1, 2, 1, 1000, TO_DATE('2033/01/01', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (4, 'Sofm', 'Duy', 'Le Quang', 2, 2, 1, 4000, TO_DATE('2024/01/01', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (5, 'TheShy', 'Seung-lok', 'Kang', 2, 1, 1, 3000, TO_DATE('2025/01/01', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (6, 'Xiaohu', 'Yuan-Hao', 'Li', 2, 3, 1, 2000, TO_DATE('2025/01/01', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (7, 'Yike', 'Martin', 'Sundelin', 3, 2, 1, 3000, TO_DATE('2027/02/03', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (8, 'Caps', 'Rasmus', 'Borregaard Winther', 3, 3, 1, 4000, TO_DATE('2027/02/03', 'yyyy/mm/dd'));
    
insert into players (id_player, ingame_name, first_name, last_name, id_team, player_position, status, salary, contract_expired)
    values (9, 'Mikyx', 'Mihael', 'Mehle', 3, 5, 1, 3000, TO_DATE('2027/02/03', 'yyyy/mm/dd'));

--------------------------------------------------------------------------------------------------------------------------------------------
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (1, 1, 2, 1, 1, TO_DATE('2023/01/01 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/01 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (2, 2, 1, 1, 2, TO_DATE('2023/01/02 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/02 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (3, 3, 2, 1, 1, TO_DATE('2023/01/03 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/03 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (4, 1, 3, 1, 1, TO_DATE('2023/01/04 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/04 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (5, 2, 3, 1, 2, TO_DATE('2023/01/05 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/05 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (6, 3, 2, 1, 1, TO_DATE('2023/01/06 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/06 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (7, 1, 2, 1, 1, TO_DATE('2023/01/07 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/07 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (8, 2, 3, 1, 1, TO_DATE('2023/01/08 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/08 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (9, 3, 1, 1, 2, TO_DATE('2023/01/09 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/09 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, game_result, start_at, end_at, status)
    values (10, 1, 2, 1, 2, TO_DATE('2023/01/10 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/10 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 2);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, start_at, end_at, status)
    values (11, 2, 3, 1, TO_DATE('2023/01/11 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/11 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 1);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, start_at, end_at, status)
    values (12, 1, 3, 1, TO_DATE('2023/01/12 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/12 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 0);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, start_at, end_at, status)
    values (13, 2, 1, 1, TO_DATE('2023/01/13 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/13 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 0);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, start_at, end_at, status)
    values (14, 1, 2, 1, TO_DATE('2023/01/14 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/14 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 0);
    
insert into game_history (id_game, id_blue_team, id_red_team, id_spectator, start_at, end_at, status)
    values (15, 3, 2, 1, TO_DATE('2023/01/15 06:30 PM', 'yyyy/mm/dd HH:MI PM'), TO_DATE('2023/01/15 07:30 PM', 'yyyy/mm/dd HH:MI PM'), 0);
    
-----------------------------------------------------------------------------
insert into contracts (id_manager, id_player, start_at, price)
    values (1, 1, TO_DATE('2033/05/07', 'yyyy/mm/dd'), 7000);
    
insert into contracts (id_manager, id_player, start_at, price)
    values (2, 5, TO_DATE('2033/05/07', 'yyyy/mm/dd'), 6000);
    
insert into contracts (id_manager, id_player, start_at, price)
    values (3, 8, TO_DATE('2033/05/07', 'yyyy/mm/dd'), 5000);
    
insert into contracts (id_player, start_at, price)
    values (9, TO_DATE('2033/05/07', 'yyyy/mm/dd'), 16000);
    
DELETE FROM CONTRACTS WHERE ID_CONTRACT=2;

COMMIT;
select * from game_history;
select * from contracts;
-- List of contracts 4.2
-- first_name, last_name, id_team, player_position, status, salary, contract_expired
SELECT 
    Info.id_contract, Info.ingame_name, Info.first_name, Info.last_name, Info.player_position, Info.salary, Info.price,
    Stats.team_name, Stats.wins, Stats.loses, Stats.games_played, Stats.win_rate,
    Info.contract_expired, Info.start_at
FROM
(SELECT
    Contracts.id_contract, Players.ingame_name, Players.first_name, Players.last_name, Players.id_team, 
    Players.player_position, Players.salary, Players.contract_expired,
    Contracts.start_at, Contracts.price
FROM Players JOIN Contracts ON Players.id_player = Contracts.id_player) Info
JOIN
(SELECT 
    Win_table.id_team, Win_table.team_name, Win_table.wins, Lose_table.loses,
    (Win_table.wins + Lose_table.loses) games_played,
    ROUND((Win_table.wins / (Win_table.wins + Lose_table.loses) * 100), 1) win_rate
FROM 
    (SELECT id_team, team_name, SUM(wins) wins FROM
        (
            (SELECT id_team, team_name, COUNT(*) wins 
                FROM teams JOIN game_history ON id_team = id_red_team 
                WHERE status = 2 AND game_result = 2 
                GROUP BY id_team, team_name) UNION ALL
            (SELECT id_team, team_name, COUNT(*) wins 
                FROM teams join game_history ON id_team = id_blue_team 
                WHERE status = 2 AND game_result = 1 
                GROUP BY id_team, team_name)
        ) GROUP BY id_team, team_name) Win_table
    JOIN
    (SELECT id_team, team_name, SUM(loses) loses FROM
        (
            (SELECT id_team, team_name, COUNT(*) loses 
                FROM teams JOIN game_history ON id_team = id_red_team 
                WHERE status = 2 AND game_result = 1 
                GROUP BY id_team, team_name) UNION ALL
            (SELECT id_team, team_name, COUNT(*) loses 
                FROM teams JOIN game_history ON id_team = id_blue_team 
                WHERE status = 2 AND game_result = 2 
                GROUP BY id_team, team_name)
        ) GROUP BY id_team, team_name) Lose_table
    
    ON Win_table.id_team = Lose_table.id_team) Stats
ON Info.id_team = Stats.id_team;
    
CREATE OR REPLACE PROCEDURE BuyContract(p_id_contract IN INT, p_id_buyer IN INT, p_new_salary IN INT, p_new_contract_expired IN DATE, msg OUT VARCHAR)
AS
    v_new_manager Managers%ROWTYPE;
    v_contract Contracts%ROWTYPE;
    v_salary INT;
    NOT_ENOUGH_FUND EXCEPTION;
BEGIN
    SELECT * INTO v_new_manager FROM Managers WHERE id_manager = p_id_buyer;
    SELECT * INTO v_contract FROM Contracts WHERE id_contract = p_id_contract;
    SELECT salary INTO v_salary from Players WHERE players.id_player = v_contract.id_player;
    IF v_new_manager.budget - p_new_salary - v_contract.price < Get_Team_Value(v_new_manager.id_team) THEN
        msg := 'Not Enough Fund';
        RAISE NOT_ENOUGH_FUND;
    ELSE
        UPDATE Players SET
            id_team = v_new_manager.id_team,
            salary = p_new_salary,
            contract_expired = p_new_contract_expired
        WHERE id_player = v_contract.id_player;
        
        UPDATE Managers SET
            budget = v_new_manager.budget - v_contract.price
        WHERE id_manager = p_id_buyer;
        
        IF v_contract.id_manager IS NOT NULL THEN
            UPDATE Managers SET
                budget = budget + v_contract.price
            WHERE id_manager = v_contract.id_manager;
        END IF;
        
        DELETE FROM Contracts WHERE id_contract = p_id_contract;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('Successful');
    msg := 'Successful';
EXCEPTION
    WHEN NOT_ENOUGH_FUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Not Enough Fund');
END;

CREATE OR REPLACE FUNCTION Get_Team_Value(p_id_team int)
RETURN INT AS
    v_value int;
BEGIN
    v_value := 0;
    FOR v_salary IN (SELECT salary FROM Players WHERE id_team = p_id_team) LOOP
        v_value := v_value + v_salary.salary;
    END LOOP;
    
    RETURN v_value;
END;

CREATE OR REPLACE PROCEDURE TerminateContract(p_id_player IN int, p_date IN date, msg OUT varchar)
AS
    v_player Players%ROWTYPE;
BEGIN
    SELECT * INTO v_player FROM Players WHERE id_player = p_id_player;
    IF p_date < v_player.contract_expired THEN
        UPDATE Players SET id_team = NULL WHERE id_player = p_id_player;
        DBMS_OUTPUT.PUT_LINE('Expired');
        msg := 'Expired';
    ELSE
        DBMS_OUTPUT.PUT_LINE('Not Expired Yet');
        msg := 'Not Expired Yet';
    END IF;
END;

DECLARE
    msg VARCHAR(50);
BEGIN
    TerminateContract(1, TO_DATE('2032/05/07', 'yyyy/mm/dd'), msg);
    DBMS_OUTPUT.PUT_LINE(msg);
END;

EXECUTE BuyContract(1, 2, 3000, TO_DATE('2034/05/07', 'yyyy/mm/dd'), msg);
EXECUTE BuyContract(2, 1, 5000, TO_DATE('2034/05/07', 'yyyy/mm/dd'), msg);
EXECUTE BuyContract(4, 3, 5000, TO_DATE('2034/05/07', 'yyyy/mm/dd'), msg);

EXECUTE TerminateContract(1, TO_DATE('2032/05/07', 'yyyy/mm/dd'), msg);
EXECUTE TerminateContract(1, TO_DATE('2035/05/07', 'yyyy/mm/dd'), msg);

